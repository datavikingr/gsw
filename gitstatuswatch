#simple bash script for polling git status updates with a shitty UI; run this in tmux or terminal that can split; even another window, if you're into that.

### Function defintions ###
function help() {
	echo "Git Status Poller"
	echo 
	echo "usage: gitstatus.sh [-t X] [-r filepath]"	
	echo "  -t <int> time; 30s, 5m, 2h, etc."
	echo "  -r <filepath to repository>"
	echo
	echo "Intended usage is screen/tmux scenario, to keep track of live changes to your local repo."
}

function mainloop() {
	clear
	echo "###########################################"
	echo "# Welcome to the top for git status, kinda."
	echo "# You're currently working in '$(pwd)'."
	echo "#"
	echo "# Press Ctrl+c to exit."
	echo "###########################################"
	echo
	git log --graph -n 5 --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit
	echo
	git status
	echo
	read -p "Would you like to commit? [y/n/q]" varcommit
	if [[ "$varcommit" == "y" ]] || [["$varcommit" == "Y"]]; then
		cd $repository
		git add *
		read -p "What's your commit message? " varmsg
		git commit -m "$varmsg"
		read -p "Remote shortname? " varremote
		read -p "Branch? " varbranch
		git push "$varremote" "$varbranch"
	elif [[ "$varcommit" == "n" ]] || [["$varcommit" == "N"]]; then
		mainloop
	else 
		echo "Invalid input. Please try Y or N."
		mainloop
	fi
	sleep $polltime
}

### INITIALIZE - which seems hilariously late in the script
### Chekcing for argument inputs
while getopts t:r:h: flag
do
    case "${flag}" in
        r) repository=${OPTARG};;
        t) polltime=${OPTARG};; 
        h) help;;
    esac
done

# Cleanup
clear
# Repo check
if [ -z "$repository" ]; then
	echo "Quick Q:"
	read -p "What's the filepath to your local repo folder? It isn't stored, it's just cd-ing over for you. " repository
	echo
fi
echo "CD-ing."
cd $repository
echo "CD-ing complete."
echo
# Poll time check
if [ -z "$polltime" ]; then
	echo "Another quick Q:"
	read -p "How frequently would like to poll? Default will be set to 30 seconds " polltime 
fi
# Default check
if [ -z "$polltime" ]; then
	echo "Ah, the classics."
	polltime = "30s"
	echo
fi

# Main body, a simple and effective inifinite while loop.
while :
do
	mainloop	
done
